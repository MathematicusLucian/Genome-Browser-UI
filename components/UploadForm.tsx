// 'use client';
import { ChangeEvent, useEffect, useRef, useState } from "react"; 
import { ImportOptions, peakImportFile } from "dexie-export-import";
// import { uploadFile } from "../utils/upload-action"; 
import axios from 'axios';
import { FileUploader } from "react-drag-drop-files";
import { v4 as uuidv4 } from 'uuid';
import { patientsIndexedDb } from "@/database/db";
import { IPatientGenome, IPatientGenomeVariant } from "@/models/db";

export default function UploadForm({patientId}) {
  const [status, setStatus] = useState(''); 
  const [importProgress, setImportProgress] = useState(0); 
  const [file, setFile] = useState<File>(null); 
  const [patientName, setPatientName] = useState('');
  const fileTypes = ["TXT"]; 
  const chunkSize = 900000; // 0.9MB  
  let totalChunks = 0;
  let chunkProgress;
  let chunkNumber = 0;
  let start = 0;
  let end = 0;

  const demoVcfGenomeFile = `
  # This data file generated by 23andMe at: Mon Nov 11 20:13:24 2013
  #
  # Below is a text version of your data.  Fields are TAB-separated
  # Each line corresponds to a single SNP.  For each SNP, we provide its identifier 
  # (an rsid or an internal id), its location on the reference human genome, and the 
  # genotype call oriented with respect to the plus strand on the human reference sequence.
  # We are using reference human assembly build 37 (also known as Annotation Release 104).
  # Note that it is possible that data downloaded at different times may be different due to ongoing 
  # improvements in our ability to call genotypes. More information about these changes can be found at:
  # https://www.23andme.com/you/download/revisions/
  # 
  # More information on reference human assembly build 37 (aka Annotation Release 104):
  # http://www.ncbi.nlm.nih.gov/mapview/map_search.cgi?taxid=9606
  #
  # rsid	chromosome	position	genotype
  rs4477212	1	82154	AA
  rs3094315	1	752566	AA
  rs3131972	1	752721	GG
  rs12562034	1	768448	AG
  rs12124819	1	776546	AA
  rs11240777	1	798959	AG
  rs6681049	1	800007	CC
  rs4970383	1	838555	CC
  rs4475691	1	846808	CT
  rs7537756	1	854250	AG
  rs13302982	1	861808	GG
  rs1110052	1	873558	GT
  rs2272756	1	882033	GG
  rs3748597	1	888659	CC
  rs13303106	1	891945	AG
  rs28415373	1	893981	CC
  rs13303010	1	894573	AG
  rs6696281	1	903104	CC
  rs28391282	1	904165	GG
  rs2340592	1	910935	AG
  rs13303118	1	918384	GT
  rs6665000	1	924898	AA
  rs2341362	1	927309	CC
  rs9777703	1	928836	TT
  rs1891910	1	932457	AG
  rs9697457	1	934345	GG
  rs35940137	1	940203	GG
  rs3128117	1	944564	CC
  rs2465126	1	947034	AA
  `;
  const blob = new Blob([demoVcfGenomeFile]);

  const handleError = (file) => {
    console.log(handleError);
  };

  const handleFileUpload = async(file: File) => { 
    setFile(file);
    totalChunks = Math.ceil(file.size / chunkSize);
    console.log('totalChunks', totalChunks);
    chunkProgress = 100 / totalChunks;
    console.log('chunkProgress', chunkProgress);
    if (!file) {
      alert("Please select a file to upload.");
      return;
    }
    setImportProgress(0);
    uploadNextChunksRecursively(file); 
  }

  const uploadNextChunksRecursively = async (file: File) => {
    end = start + chunkSize; 
    if (end <= file.size) {
      const chunkBlob = file.slice(start, end); // Blob
      await addGeneVariants(chunkBlob);
      const temp = `Chunk ${ chunkNumber + 1 }/${totalChunks} uploaded successfully`;
      setStatus(temp); 
      updateImportProgress({ totalRows: chunkProgress, completedRows: Number(chunkNumber + 1)});
      chunkNumber++;
      start = end;
      uploadNextChunksRecursively(file);
    } else {
      setImportProgress(0);
      setStatus("File upload completed");
    }
  }; 

  const updateImportProgress = ({ totalRows, completedRows }: { totalRows: any, completedRows: number }): boolean => {
    setImportProgress(100 * completedRows / totalRows); 
    return true;
  }

  const handleFile = (chunkFormDataBuffer) => { 
    const vcfDataRows = chunkFormDataBuffer.split(/\r\n|\n/); 
    const vcfDataRowsWithoutHeadingText = vcfDataRows.filter((x) => String(x).startsWith('rs') || String(x).startsWith('i'));
    const vcfDelimitedRow = vcfDataRowsWithoutHeadingText.map((x: any) => x.split('\t')); 
    vcfDelimitedRow.map((vcfRow) => {
      try {
        // Database 
        if(!patientId) {
          patientsIndexedDb.patientProfile.where('patientName').equals('Default Profile');
        }
        const patientGenomeId = uuidv4();
        const patientGeneVariantId = uuidv4();
        const vcfSource = 'undefined';
        const patientGenome: IPatientGenome = {  
          patientGenomeId: patientGenomeId,
          source: vcfSource,
          datetimestamp: Date.now(),
          patientId: patientId,
        }
        patientsIndexedDb.patientGenome.add(patientGenome);
        console.log(vcfRow);
        const patientGenomeVariant: IPatientGenomeVariant = { 
          patientGeneVariantId: patientGeneVariantId,
          rsid: vcfRow[0],
          genotype: vcfRow[3],
          chromosome: vcfRow[1],
          position: vcfRow[2],
          datetimestamp: Date.now(),
          patientGenomeId: patientGenomeId,
        }
        patientsIndexedDb.patientGenomeVariant.add(patientGenomeVariant);
      } catch (error) {
          console.error('Error addind gene varients to database:', error);
      }
    }); 
  }

  const addGeneVariants = async (chunkBlob: Blob) => {
    const reader = new FileReader();
    reader.onload = () => handleFile(reader.result);
    reader.readAsText(chunkBlob);
  }

  return (
    <> 
      <div className="file-uploader">
        <div>Selected Patient Id: {patientId}</div>
        {importProgress==0 && (<FileUploader
            multiple={false}
            uploadedLabel={false}
            handleChange={handleFileUpload} // Will be called when the user selects or drops file(s)
            maxSize="50" // The maximum size of the file (Number in MB)
            onSizeError={(file) => console.log("Size Error")}
            hoverTitle={"Drop here"}
            dropMessageStyle={{backgroundColor: 'red'}}
            name="file"
            types={fileTypes}
            // error={handleError}
          />
        )}
        {/* <p>
          {file ? `File name: ${file.name}` : "no files uploaded yet"}
        </p> */}
        {/* {importProgress!=0 && (
          <p>
            Uploading Progress: {importProgress}
          </p>
        )} */}
        </div>
        <style jsx>{`
          .file-uploader {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
          }
          FileUploader {
          }
          p, input, label, select, button {
            font-size: 0.8em;
          }
          form {
            padding: 0.5em;
            border: 1px rgb(236, 232, 232) solid;
          }
          label {
            padding: 0 0.5em; 
          }
          input {
            padding: 0 0.5em; 
            border: 1px rgb(222, 221, 221) solid;
          }
          button {
            padding: 0 0.5em; 
          }
      `}</style>
    </>
  );
}

// const httpRequestOptions = {
//   method: "POST",
//   body: formData,   
// };
// console.log('httpRequestOptions', httpRequestOptions);
// let response = fetch("/api/upload", httpRequestOptions)
//   .then((response) => response.json())
//   .then((data) => {
//     console.log({ data });
// })
// .catch((error) => {
//   console.error("Error uploading chunk:", error);
// }); 